use std::{
    collections::HashMap,
    io::{BufRead, BufReader},
};

use anyhow::{anyhow, Context, Result};
use dirs::home_dir;

pub struct KeySet {
    keys: HashMap<String, Box<[u8]>>,
    title_keys: HashMap<String, Box<[u8]>>,
}

impl KeySet {
    pub fn get(&self, name: &str) -> Result<&[u8]> {
        // println!("get key: {}", name);
        self.keys.get(name).map(|x| &**x).ok_or_else(|| anyhow!("Key not found: {name}"))
    }

    pub fn header_key(&self) -> Result<[u8; 0x20]> {
        let key = self.get("header_key")?;
        <_>::try_from(key).map_err(|_| anyhow!("Invalid key size for header_key"))
    }

    pub fn title_key(&self, rights_id: [u8; 0x10]) -> Result<[u8; 0x10]> {
        let title_key_str = hex::encode(rights_id);
        let key = self
            .title_keys
            .get(&title_key_str)
            .map(|x| &**x)
            .ok_or_else(|| anyhow!("Title key not found: {}", title_key_str))?;
        <_>::try_from(key).map_err(|_| anyhow!("Invalid key size for {title_key_str}"))
    }

    pub fn key_area_key(&self, master_key_idx: u8, key_area_index: u8) -> Result<[u8; 0x10]> {
        let key_name =
            format!("key_area_key_{}_{master_key_idx:02x}", key_area_str(key_area_index)?);
        let key = self.get(&key_name)?;
        <_>::try_from(key).map_err(|_| anyhow!("Invalid key size for {key_name}"))
    }

    pub fn title_kek(&self, index: u8) -> Result<[u8; 0x10]> {
        let key_name = format!("titlekek_{index:02x}");
        let key = self.get(&key_name)?;
        <_>::try_from(key).map_err(|_| anyhow!("Invalid key size for {key_name}"))
    }
}

fn key_area_str(key_area_index: u8) -> Result<&'static str> {
    match key_area_index {
        0 => Ok("application"),
        1 => Ok("ocean"),
        2 => Ok("system"),
        _ => Err(anyhow!("Invalid key area key index: {}", key_area_index)),
    }
}

pub fn read_keyset() -> Result<KeySet> {
    let mut keys = HashMap::new();
    let home_dir = home_dir().context("Failed to get home directory")?;
    let prod_keys_path = home_dir.join(".switch/prod.keys");
    let file = BufReader::new(
        std::fs::File::open(&prod_keys_path)
            .with_context(|| format!("Failed to open file {}", prod_keys_path.display()))?,
    );
    for line in file.lines() {
        let line = line?;
        let parts: Vec<&str> = line.split_whitespace().collect();
        if parts.len() != 3 {
            continue;
        }
        let key = parts[2];
        let key = hex::decode(key)?;
        let name = parts[0].to_string();
        // println!("{} = {:?}", name, key);
        keys.insert(name, key.into_boxed_slice());
    }
    let mut title_keys = HashMap::new();
    let title_keys_path = home_dir.join(".switch/title.keys");
    let file = BufReader::new(
        std::fs::File::open(&title_keys_path)
            .with_context(|| format!("Failed to open file {}", title_keys_path.display()))?,
    );
    for line in file.lines() {
        let line = line?;
        let parts: Vec<&str> = line.split_whitespace().collect();
        if parts.len() != 3 {
            continue;
        }
        let key = parts[2];
        let key = hex::decode(key)?;
        let name = parts[0].to_string();
        // println!("{} = {:?}", name, key);
        title_keys.insert(name, key.into_boxed_slice());
    }
    Ok(KeySet { keys, title_keys })
}

pub struct NcaKeys {
    pub nca_hdr_fixed_key_moduli: [[u8; 0x100]; 2],
}

pub const NCA_KEYS_RETAIL: NcaKeys = NcaKeys {
    nca_hdr_fixed_key_moduli: [
        [
            0xBF, 0xBE, 0x40, 0x6C, 0xF4, 0xA7, 0x80, 0xE9, 0xF0, 0x7D, 0x0C, 0x99, 0x61, 0x1D,
            0x77, 0x2F, 0x96, 0xBC, 0x4B, 0x9E, 0x58, 0x38, 0x1B, 0x03, 0xAB, 0xB1, 0x75, 0x49,
            0x9F, 0x2B, 0x4D, 0x58, 0x34, 0xB0, 0x05, 0xA3, 0x75, 0x22, 0xBE, 0x1A, 0x3F, 0x03,
            0x73, 0xAC, 0x70, 0x68, 0xD1, 0x16, 0xB9, 0x04, 0x46, 0x5E, 0xB7, 0x07, 0x91, 0x2F,
            0x07, 0x8B, 0x26, 0xDE, 0xF6, 0x00, 0x07, 0xB2, 0xB4, 0x51, 0xF8, 0x0D, 0x0A, 0x5E,
            0x58, 0xAD, 0xEB, 0xBC, 0x9A, 0xD6, 0x49, 0xB9, 0x64, 0xEF, 0xA7, 0x82, 0xB5, 0xCF,
            0x6D, 0x70, 0x13, 0xB0, 0x0F, 0x85, 0xF6, 0xA9, 0x08, 0xAA, 0x4D, 0x67, 0x66, 0x87,
            0xFA, 0x89, 0xFF, 0x75, 0x90, 0x18, 0x1E, 0x6B, 0x3D, 0xE9, 0x8A, 0x68, 0xC9, 0x26,
            0x04, 0xD9, 0x80, 0xCE, 0x3F, 0x5E, 0x92, 0xCE, 0x01, 0xFF, 0x06, 0x3B, 0xF2, 0xC1,
            0xA9, 0x0C, 0xCE, 0x02, 0x6F, 0x16, 0xBC, 0x92, 0x42, 0x0A, 0x41, 0x64, 0xCD, 0x52,
            0xB6, 0x34, 0x4D, 0xAE, 0xC0, 0x2E, 0xDE, 0xA4, 0xDF, 0x27, 0x68, 0x3C, 0xC1, 0xA0,
            0x60, 0xAD, 0x43, 0xF3, 0xFC, 0x86, 0xC1, 0x3E, 0x6C, 0x46, 0xF7, 0x7C, 0x29, 0x9F,
            0xFA, 0xFD, 0xF0, 0xE3, 0xCE, 0x64, 0xE7, 0x35, 0xF2, 0xF6, 0x56, 0x56, 0x6F, 0x6D,
            0xF1, 0xE2, 0x42, 0xB0, 0x83, 0x40, 0xA5, 0xC3, 0x20, 0x2B, 0xCC, 0x9A, 0xAE, 0xCA,
            0xED, 0x4D, 0x70, 0x30, 0xA8, 0x70, 0x1C, 0x70, 0xFD, 0x13, 0x63, 0x29, 0x02, 0x79,
            0xEA, 0xD2, 0xA7, 0xAF, 0x35, 0x28, 0x32, 0x1C, 0x7B, 0xE6, 0x2F, 0x1A, 0xAA, 0x40,
            0x7E, 0x32, 0x8C, 0x27, 0x42, 0xFE, 0x82, 0x78, 0xEC, 0x0D, 0xEB, 0xE6, 0x83, 0x4B,
            0x6D, 0x81, 0x04, 0x40, 0x1A, 0x9E, 0x9A, 0x67, 0xF6, 0x72, 0x29, 0xFA, 0x04, 0xF0,
            0x9D, 0xE4, 0xF4, 0x03,
        ],
        [
            0xAD, 0xE3, 0xE1, 0xFA, 0x04, 0x35, 0xE5, 0xB6, 0xDD, 0x49, 0xEA, 0x89, 0x29, 0xB1,
            0xFF, 0xB6, 0x43, 0xDF, 0xCA, 0x96, 0xA0, 0x4A, 0x13, 0xDF, 0x43, 0xD9, 0x94, 0x97,
            0x96, 0x43, 0x65, 0x48, 0x70, 0x58, 0x33, 0xA2, 0x7D, 0x35, 0x7B, 0x96, 0x74, 0x5E,
            0x0B, 0x5C, 0x32, 0x18, 0x14, 0x24, 0xC2, 0x58, 0xB3, 0x6C, 0x22, 0x7A, 0xA1, 0xB7,
            0xCB, 0x90, 0xA7, 0xA3, 0xF9, 0x7D, 0x45, 0x16, 0xA5, 0xC8, 0xED, 0x8F, 0xAD, 0x39,
            0x5E, 0x9E, 0x4B, 0x51, 0x68, 0x7D, 0xF8, 0x0C, 0x35, 0xC6, 0x3F, 0x91, 0xAE, 0x44,
            0xA5, 0x92, 0x30, 0x0D, 0x46, 0xF8, 0x40, 0xFF, 0xD0, 0xFF, 0x06, 0xD2, 0x1C, 0x7F,
            0x96, 0x18, 0xDC, 0xB7, 0x1D, 0x66, 0x3E, 0xD1, 0x73, 0xBC, 0x15, 0x8A, 0x2F, 0x94,
            0xF3, 0x00, 0xC1, 0x83, 0xF1, 0xCD, 0xD7, 0x81, 0x88, 0xAB, 0xDF, 0x8C, 0xEF, 0x97,
            0xDD, 0x1B, 0x17, 0x5F, 0x58, 0xF6, 0x9A, 0xE9, 0xE8, 0xC2, 0x2F, 0x38, 0x15, 0xF5,
            0x21, 0x07, 0xF8, 0x37, 0x90, 0x5D, 0x2E, 0x02, 0x40, 0x24, 0x15, 0x0D, 0x25, 0xB7,
            0x26, 0x5D, 0x09, 0xCC, 0x4C, 0xF4, 0xF2, 0x1B, 0x94, 0x70, 0x5A, 0x9E, 0xEE, 0xED,
            0x77, 0x77, 0xD4, 0x51, 0x99, 0xF5, 0xDC, 0x76, 0x1E, 0xE3, 0x6C, 0x8C, 0xD1, 0x12,
            0xD4, 0x57, 0xD1, 0xB6, 0x83, 0xE4, 0xE4, 0xFE, 0xDA, 0xE9, 0xB4, 0x3B, 0x33, 0xE5,
            0x37, 0x8A, 0xDF, 0xB5, 0x7F, 0x89, 0xF1, 0x9B, 0x9E, 0xB0, 0x15, 0xB2, 0x3A, 0xFE,
            0xEA, 0x61, 0x84, 0x5B, 0x7D, 0x4B, 0x23, 0x12, 0x0B, 0x83, 0x12, 0xF2, 0x22, 0x6B,
            0xB9, 0x22, 0x96, 0x4B, 0x26, 0x0B, 0x63, 0x5E, 0x96, 0x57, 0x52, 0xA3, 0x67, 0x64,
            0x22, 0xCA, 0xD0, 0x56, 0x3E, 0x74, 0xB5, 0x98, 0x1F, 0x0D, 0xF8, 0xB3, 0x34, 0xE6,
            0x98, 0x68, 0x5A, 0xAD,
        ],
    ],
};
